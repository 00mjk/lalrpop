use std::error::Error;

#[derive(Debug)]
pub enum ParseError<L,T> {
    /// Generated by the parser when it encounters a token (or EOF) it did not
    /// expect.
    UnrecognizedToken {
        /// If this is `Some`, then an unexpected token of type `T`
        /// was observed, with a span given by the two `L` values. If
        /// this is `None`, then EOF was observed when it was not
        /// expected.
        token: Option<(L, T, L)>,

        /// The set of expected tokens: these names are taken from the
        /// grammar and hence may not necessarily be suitable for
        /// presenting to the user.
        expected: Vec<String>
    },

    /// Generated by the parser when it encounters additional,
    /// unexpected tokens.
    ExtraToken {
        token: (L, T, L),
    },

    /// Just a string describing the error. This is easy to generate,
    /// but suboptimal as it has no span or anything
    /// else. Occasionally useful from action code but generally to be
    /// avoided.
    Message {
        message: String
    },

    /// A string describing the error and a span in the source. This
    /// is This is easy to generate,
    /// but suboptimal as it has no span or anything
    /// else. Occasionally useful from action code but generally to be
    /// avoided.
    MessageSpan {
        start: (L, L),
        message: String,
    },

    /// A richer alternative to `Message`, error objects offer more
    /// information and reflection.
    ErrorObject {
        error: Box<Error>,
    },
}

